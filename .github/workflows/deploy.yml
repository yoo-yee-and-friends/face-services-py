name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: zz212224236/snapgoated-services:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Deploy to EC2 via SSH
      uses: appleboy/ssh-action@v0.1.9
      with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # ติดตั้ง Docker Compose
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            
            # สร้างไฟล์ docker-compose.yml
            cat > docker-compose.yml << 'EOL'
            version: '3.8'
            services:
              web:
                image: zz212224236/snapgoated-services:${{ github.sha }}
                ports:
                  - "8000:8000"
                environment:
                  - CELERY_BROKER_URL=redis://redis:6379/0
                  - CELERY_RESULT_BACKEND=redis://redis:6379/0
                  - OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES
                  - WEB_CONCURRENCY=1
                  - GUNICORN_MAX_WORKERS=2
                  - GUNICORN_MIN_WORKERS=1
                  - MAX_WORKER_MEMORY_MB=4096
                depends_on:
                  - redis
                restart: unless-stopped
                deploy:
                  resources:
                    limits:
                      memory: 1G
              worker:
                image: zz212224236/snapgoated-services:${{ github.sha }}
                command: celery -A app.core.celery_app worker --loglevel=info --concurrency=2 --max-memory-per-child=4000000
                environment:
                  - CELERY_BROKER_URL=redis://redis:6379/0
                  - CELERY_RESULT_BACKEND=redis://redis:6379/0
                depends_on:
                  - redis
                  - web
                restart: unless-stopped
                deploy:
                  resources:
                    limits:
                      memory: 1G
              beat:
                image: zz212224236/snapgoated-services:${{ github.sha }}
                command: celery -A app.core.celery_app beat --loglevel=info
                environment:
                  - CELERY_BROKER_URL=redis://redis:6379/0
                  - CELERY_RESULT_BACKEND=redis://redis:6379/0
                depends_on:
                  - redis
                  - web
                restart: unless-stopped
              flower:
                image: zz212224236/snapgoated-services:${{ github.sha }}
                command: celery -A app.core.celery_app flower --port=5555
                ports:
                  - "5555:5555"
                environment:
                  - CELERY_BROKER_URL=redis://redis:6379/0
                  - CELERY_RESULT_BACKEND=redis://redis:6379/0
                depends_on:
                  - redis
                  - web
                  - worker
                restart: unless-stopped
              redis:
                image: redis:6-alpine
                volumes:
                  - redis-data:/data
                restart: unless-stopped
            volumes:
              redis-data:
            EOL

            # ล็อกอินเข้า Docker Hub ด้วย sudo
            echo "${{ secrets.DOCKER_PASSWORD }}" | sudo docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            
            # Stop the running container (if any) - improved handling
              CONTAINER_ID=$(sudo docker ps -aq --filter name=snapgoated-services)
              if [[ -n "$CONTAINER_ID" ]]; then
                echo "Stopping container: $CONTAINER_ID"
                sudo docker stop "$CONTAINER_ID"
                echo "Removing container: $CONTAINER_ID"
                sudo docker rm "$CONTAINER_ID"
              fi

              # Remove old images (optional, but good practice) - improved handling
              IMAGE_ID=$(sudo docker images -aq zz212224236/snapgoated-services)
              if [[ -n "$IMAGE_ID" ]]; then
                echo "Removing image: $IMAGE_ID"
                sudo docker rmi "$IMAGE_ID"
              fi
            
            # ใช้คำสั่ง docker-compose พร้อม sudo
             sudo docker-compose down -v
            
              # ล้าง Celery tasks ที่ค้างอยู่ในคิวผ่าน Redis
              sudo docker run --rm --network host redis:6-alpine redis-cli -h localhost FLUSHALL
            
              # ลบ containers ที่หยุดทำงานแล้ว
              sudo docker container prune -f
            
              # ลบ images ที่ไม่ได้ใช้งาน (--all จะลบทุก images ที่ไม่มี containers ใช้งาน)
              sudo docker image prune -af
            
              # ลบ volumes ที่ไม่ได้ใช้
              sudo docker volume prune -f
            
              # สร้าง services ใหม่
              sudo docker-compose up -d
            
              # แสดงสถานะปัจจุบัน
              echo "===== Current Containers ====="
              sudo docker-compose ps
              echo "===== Remaining Images ====="
              sudo docker images

    - name: Notify Discord
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        GITHUB_ACTOR: ${{ github.actor }}
        GITHUB_COMMIT: ${{ github.event.head_commit.message }}
        GITHUB_REPO: ${{ github.repository }}
        GITHUB_RUN_URL: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
      run: |
        GITHUB_SUCCESS="true"

        PAYLOAD=$(echo -e "🚀 **Deployment Status: Completed**\n  **Repository:** $GITHUB_REPO\n  **By:** $GITHUB_ACTOR\n  **Commit:** $GITHUB_COMMIT\n  **[View Action]($GITHUB_RUN_URL)**" | jq -Rs .)

        curl -H "Content-Type: application/json" \
             -X POST \
             -d "$PAYLOAD" \
             $DISCORD_WEBHOOK